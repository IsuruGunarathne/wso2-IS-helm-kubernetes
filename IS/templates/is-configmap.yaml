# Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: identity-server-conf
  namespace: wso2is

data:
  deployment.toml: |-
    # Deployment config for Identity Server deployment
    [server]
    hostname = "wso2.is"
    node_ip = "$env{NODE_IP}"
    base_path = "https://$ref{server.hostname}:${carbon.management.port}"
    force_local_cache = true

    [super_admin] 
    username = "admin"
    password = "admin"
    create_admin_account = true

    [user_store]
    type = "database_unique_id"

    [database.identity_db]
    type = "h2"
    url = "jdbc:h2:./repository/database/WSO2IDENTITY_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000"
    username = "wso2carbon"
    password = "wso2carbon"

    [database.shared_db]
    type = "h2"
    url = "jdbc:h2:./repository/database/WSO2SHARED_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000"
    username = "wso2carbon"
    password = "wso2carbon"
    
    [clustering]
    membership_scheme = "kubernetes"
    domain = "wso2.carbon.domain"

    [clustering.properties]
    membershipSchemeClassName = "org.wso2.carbon.membership.scheme.kubernetes.KubernetesMembershipScheme"
    KUBERNETES_NAMESPACE = "wso2is"
    KUBERNETES_SERVICES = "identity-service"
    KUBERNETES_MASTER_SKIP_SSL_VERIFICATION = true
    USE_DNS = false

    [hazelcast]
    "hazelcast.shutdownhook.enabled" = "false"
    "hazelcast.logging.type"= "log4j2"

    [transport.http.properties]
    proxyPort = 80
    [transport.https.properties]
    proxyPort = 443
    
    [keystore.primary]
    file_name = "wso2carbon.jks"
    password = "wso2carbon"

    [truststore]
    file_name="client-truststore.jks"
    password="wso2carbon"
    type="JKS"

    [account_recovery.endpoint.auth]
    hash= "66cd9688a2ae068244ea01e70f0e230f5623b7fa4cdecb65070a09ec06452262"

    [identity.auth_framework.endpoint]
    app_password= "dashboard"

    [cors]
    allow_generic_http_requests = true
    allow_any_origin = true
    allow_subdomains = true
    supported_methods = [
    "GET",
    "POST",
    "HEAD",
    "OPTIONS"
    ]
    support_any_header = true
    supported_headers = []
    exposed_headers = []
    supports_credentials = true
    max_age = 3600
    tag_requests = false

    # from configmap
    
  registry.xml.j2: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
      ~ Copyright 2005-2011 WSO2, Inc. (http://wso2.com)
      ~
      ~ Licensed under the Apache License, Version 2.0 (the "License");
      ~ you may not use this file except in compliance with the License.
      ~ You may obtain a copy of the License at
      ~
      ~ http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~ Unless required by applicable law or agreed to in writing, software
      ~ distributed under the License is distributed on an "AS IS" BASIS,
      ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~ See the License for the specific language governing permissions and
      ~ limitations under the License.
      -->
    <wso2registry xmlns:svns="http://org.wso2.securevault/configuration">
        <!--
        For details on configuring different config & governance registries see;
        http://wso2.org/library/tutorials/2010/04/sharing-registry-space-across-multiple-product-instances
        -->
        <currentDBConfig>wso2registry</currentDBConfig>
        <readOnly>true</readOnly>
        <enableCache>true</enableCache>
        <registryRoot>/</registryRoot>
        <dbConfig
            name="wso2registry">
        {% if registry.use_shared_db_as_datasource is sameas true %}
            <dataSource>jdbc/SHARED_DB</dataSource>
        {% else %}
            <dataSource>jdbc/WSO2CarbonDB</dataSource>
        {% endif %}
        </dbConfig>
        {% if registry.enable_mount is not defined or registry.enable_mount is sameas true %}
        <dbConfig name="govregistry">
            <dataSource>jdbc/SHARED_DB</dataSource>
        </dbConfig>
        <dbConfig name="configregistry">
        {% if database.config is defined%}
            <dataSource>jdbc/WSO2CONFIG_DB</dataSource>
        {% else %}
            <dataSource>jdbc/SHARED_DB</dataSource>
        {% endif %}
        </dbConfig>
        <remoteInstance url="https://{{server.hostname}}">
            <id>gov</id>
            <cacheId>{{governance_data.cache_id}}</cacheId>
            <dbConfig>govregistry</dbConfig>
            <readOnly>false</readOnly>
            <enableCache>{{governance_data.enable_cache}}</enableCache>
            <registryRoot>/</registryRoot>
        </remoteInstance>
        <remoteInstance url="https://{{server.hostname}}">
            <id>conf</id>
            <cacheId>{{config_data.cache_id}}</cacheId>
            <dbConfig>configregistry</dbConfig>
            <readOnly>false</readOnly>
            <enableCache>{{config_data.enable_cache}}</enableCache>
            <registryRoot>/</registryRoot>
        </remoteInstance>
        <mount overwrite="true" path="/_system/governance">
            <instanceId>gov</instanceId>
            <targetPath>{{governance_data.path}}</targetPath>
        </mount>
        <mount overwrite="true" path="/_system/config">
            <instanceId>conf</instanceId>
            <targetPath>{{config_data.path}}</targetPath>
        </mount>
        {% endif %}
      
        <!--<handler class="org.wso2.carbon.registry.extensions.handlers.SynapseRepositoryHandler">
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/vnd.apache.synapse</property>
            </filter>
        </handler>

        <handler class="org.wso2.carbon.registry.extensions.handlers.SynapseRepositoryHandler">
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/vnd.apache.esb</property>
            </filter>
        </handler>

        <handler class="org.wso2.carbon.registry.extensions.handlers.Axis2RepositoryHandler">
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/vnd.apache.axis2</property>
            </filter>
        </handler>

        <handler class="org.wso2.carbon.registry.extensions.handlers.Axis2RepositoryHandler">
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/vnd.apache.wsas</property>
            </filter>
        </handler>

        <handler class="org.wso2.carbon.registry.extensions.handlers.WSDLMediaTypeHandler">
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/wsdl+xml</property>
            </filter>
        </handler>

        <handler class="org.wso2.carbon.registry.extensions.handlers.XSDMediaTypeHandler">
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/x-xsd+xml</property>
            </filter>
        </handler> -->
        <!--remoteInstance url="https://localhost:9443/registry">
            <id>instanceid</id>
            <username>username</username>
            <password>password</password>
        </remoteInstance-->
        <!--remoteInstance url="https://localhost:9443/registry">
            <id>instanceid</id>
            <dbConfig>wso2registry</dbConfig>
            <readOnly>false</readOnly>
            <enableCache>true</enableCache>
            <registryRoot>/</registryRoot>
        </remoteInstance-->
        <!--mount path="/_system/config" overwrite="true|false|virtual">
            <instanceId>instanceid</instanceId>
            <targetPath>/_system/nodes</targetPath>
        </mount-->
        <versionResourcesOnChange>{{versioning_configuration.enable_version_resources_on_change}}</versionResourcesOnChange>
        <!-- NOTE: You can edit the options under "StaticConfiguration" only before the
        startup. -->
        <handler class="org.wso2.carbon.identity.entitlement.policy.finder.registry.RegistryPolicyHandler">
            <filter class="org.wso2.carbon.identity.entitlement.policy.finder.registry.RegistryPolicyMediaTypeMatcher">
                <property name="mediaType">application/xacml-policy+xml</property>
            </filter>
        </handler>
        <staticConfiguration>
            <versioningProperties>{{versioning_configuration.enable_versioning_properties}}</versioningProperties>
            <versioningComments>{{versioning_configuration.enable_versioning_comments}}</versioningComments>
            <versioningTags>{{versioning_configuration.enable_versioning_tags}}</versioningTags>
            <versioningRatings>{{versioning_configuration.enable_versioning_ratings}}</versioningRatings>
        </staticConfiguration>
        <indexingConfiguration>
            <startIndexing>false</startIndexing>
            <startingDelayInSeconds>35</startingDelayInSeconds>
            <indexingFrequencyInSeconds>5</indexingFrequencyInSeconds>
            <!--number of resources submit for given indexing thread -->
            <batchSize>40</batchSize>
            <!--number of worker threads for indexing -->
            <indexerPoolSize>40</indexerPoolSize>
            <!-- location storing the time the indexing took place-->
            <lastAccessTimeLocation>/_system/local/repository/components/org.wso2.carbon.registry/indexing/lastaccesstime</lastAccessTimeLocation>
            <!-- the indexers that implement the indexer interface for a relevant media type/(s) -->
            <indexers>
                <indexer
                    class="org.wso2.carbon.registry.indexing.indexer.MSExcelIndexer" mediaTypeRegEx="application/vnd.ms-excel"/>
                <indexer
                    class="org.wso2.carbon.registry.indexing.indexer.MSPowerpointIndexer" mediaTypeRegEx="application/vnd.ms-powerpoint"/>
                <indexer
                    class="org.wso2.carbon.registry.indexing.indexer.MSWordIndexer" mediaTypeRegEx="application/msword"/>
                <indexer
                    class="org.wso2.carbon.registry.indexing.indexer.PDFIndexer" mediaTypeRegEx="application/pdf"/>
                <indexer
                    class="org.wso2.carbon.registry.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/xml"/>
                <indexer
                    class="org.wso2.carbon.registry.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/(.)+\+xml"/>
                <indexer
                    class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="application/swagger\+json"/>
                <indexer
                    class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="application/(.)+\+json"/>
                <indexer
                    class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="text/(.)+"/>
                <indexer
                    class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="application/x-javascript"/>
            </indexers>
            <exclusions>
                <exclusion pathRegEx="/_system/config/repository/dashboards/gadgets/swfobject1-5/.*[.]html"/>
                <exclusion pathRegEx="/_system/local/repository/components/org[.]wso2[.]carbon[.]registry/mount/.*"/>
            </exclusions>
        </indexingConfiguration>
    </wso2registry>